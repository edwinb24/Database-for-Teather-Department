'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4959
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ApplicantReportDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ApplicantReportDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableDataTable1 As DataTable1DataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataTable1() As DataTable1DataTable
        Get
            Return Me.tableDataTable1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ApplicantReportDataSet = CType(MyBase.Clone,ApplicantReportDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DataTable1")) Is Nothing) Then
                MyBase.Tables.Add(New DataTable1DataTable(ds.Tables("DataTable1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDataTable1 = CType(MyBase.Tables("DataTable1"),DataTable1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataTable1) Is Nothing) Then
                Me.tableDataTable1.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ApplicantReportDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ApplicantReportDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDataTable1 = New DataTable1DataTable
        MyBase.Tables.Add(Me.tableDataTable1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataTable1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ApplicantReportDataSet = New ApplicantReportDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DataTable1RowChangeEventHandler(ByVal sender As Object, ByVal e As DataTable1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTable1DataTable
        Inherits Global.System.Data.TypedTableBase(Of DataTable1Row)
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZipCode As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnHomeNumber As Global.System.Data.DataColumn
        
        Private columnCellNumber As Global.System.Data.DataColumn
        
        Private columnVisited As Global.System.Data.DataColumn
        
        Private columnApplied As Global.System.Data.DataColumn
        
        Private columnEnrolled As Global.System.Data.DataColumn
        
        Private columnDegreeType As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnSpecialization As Global.System.Data.DataColumn
        
        Private columnOther_Interests As Global.System.Data.DataColumn
        
        Private columnHighSchool As Global.System.Data.DataColumn
        
        Private columnGradYear As Global.System.Data.DataColumn
        
        Private columnPlacementTest As Global.System.Data.DataColumn
        
        Private columnTestScore As Global.System.Data.DataColumn
        
        Private columnGPA As Global.System.Data.DataColumn
        
        Private columnClassRank As Global.System.Data.DataColumn
        
        Private columnClassSize As Global.System.Data.DataColumn
        
        Private columnColleges_Atteded As Global.System.Data.DataColumn
        
        Private columnEvent As Global.System.Data.DataColumn
        
        Private columnAuditionDate As Global.System.Data.DataColumn
        
        Private columnAuditor As Global.System.Data.DataColumn
        
        Private columnAuditionRating As Global.System.Data.DataColumn
        
        Private columnAuditionNotes As Global.System.Data.DataColumn
        
        Private columnDateContacted As Global.System.Data.DataColumn
        
        Private columnContactedBy As Global.System.Data.DataColumn
        
        Private columnVia As Global.System.Data.DataColumn
        
        Private columnReasons As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataTable1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZipCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HomeNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHomeNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CellNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCellNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisitedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisited
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AppliedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApplied
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EnrolledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnrolled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DegreeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDegreeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpecializationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecialization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Other_InterestsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOther_Interests
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HighSchoolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHighSchool
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GradYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlacementTestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlacementTest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestScoreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestScore
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GPAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGPA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassRankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClassSizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Colleges_AttededColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColleges_Atteded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AuditionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAuditionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AuditorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAuditor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AuditionRatingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAuditionRating
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AuditionNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAuditionNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateContactedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateContacted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReasonsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReasons
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTable1Row
            Get
                Return CType(Me.Rows(index),DataTable1Row)
            End Get
        End Property
        
        Public Event DataTable1RowChanging As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowChanged As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleting As DataTable1RowChangeEventHandler
        
        Public Event DataTable1RowDeleted As DataTable1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTable1Row( _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal ZipCode As String,  _
                    ByVal Email As String,  _
                    ByVal HomeNumber As String,  _
                    ByVal CellNumber As String,  _
                    ByVal Visited As String,  _
                    ByVal Applied As String,  _
                    ByVal Enrolled As String,  _
                    ByVal DegreeType As String,  _
                    ByVal Major As String,  _
                    ByVal Specialization As String,  _
                    ByVal Other_Interests As String,  _
                    ByVal HighSchool As String,  _
                    ByVal GradYear As String,  _
                    ByVal PlacementTest As String,  _
                    ByVal TestScore As String,  _
                    ByVal GPA As String,  _
                    ByVal ClassRank As String,  _
                    ByVal ClassSize As String,  _
                    ByVal Colleges_Atteded As String,  _
                    ByVal _Event As String,  _
                    ByVal AuditionDate As String,  _
                    ByVal Auditor As String,  _
                    ByVal AuditionRating As String,  _
                    ByVal AuditionNotes As String,  _
                    ByVal DateContacted As String,  _
                    ByVal ContactedBy As String,  _
                    ByVal Via As String,  _
                    ByVal Reasons As String) As DataTable1Row
            Dim rowDataTable1Row As DataTable1Row = CType(Me.NewRow,DataTable1Row)
            Dim columnValuesArray() As Object = New Object() {FirstName, LastName, Address, City, State, ZipCode, Email, HomeNumber, CellNumber, Visited, Applied, Enrolled, DegreeType, Major, Specialization, Other_Interests, HighSchool, GradYear, PlacementTest, TestScore, GPA, ClassRank, ClassSize, Colleges_Atteded, _Event, AuditionDate, Auditor, AuditionRating, AuditionNotes, DateContacted, ContactedBy, Via, Reasons}
            rowDataTable1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTable1Row)
            Return rowDataTable1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTable1DataTable = CType(MyBase.Clone,DataTable1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTable1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZipCode = MyBase.Columns("ZipCode")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnHomeNumber = MyBase.Columns("HomeNumber")
            Me.columnCellNumber = MyBase.Columns("CellNumber")
            Me.columnVisited = MyBase.Columns("Visited")
            Me.columnApplied = MyBase.Columns("Applied")
            Me.columnEnrolled = MyBase.Columns("Enrolled")
            Me.columnDegreeType = MyBase.Columns("DegreeType")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnSpecialization = MyBase.Columns("Specialization")
            Me.columnOther_Interests = MyBase.Columns("Other Interests")
            Me.columnHighSchool = MyBase.Columns("HighSchool")
            Me.columnGradYear = MyBase.Columns("GradYear")
            Me.columnPlacementTest = MyBase.Columns("PlacementTest")
            Me.columnTestScore = MyBase.Columns("TestScore")
            Me.columnGPA = MyBase.Columns("GPA")
            Me.columnClassRank = MyBase.Columns("ClassRank")
            Me.columnClassSize = MyBase.Columns("ClassSize")
            Me.columnColleges_Atteded = MyBase.Columns("Colleges Atteded")
            Me.columnEvent = MyBase.Columns("Event")
            Me.columnAuditionDate = MyBase.Columns("AuditionDate")
            Me.columnAuditor = MyBase.Columns("Auditor")
            Me.columnAuditionRating = MyBase.Columns("AuditionRating")
            Me.columnAuditionNotes = MyBase.Columns("AuditionNotes")
            Me.columnDateContacted = MyBase.Columns("DateContacted")
            Me.columnContactedBy = MyBase.Columns("ContactedBy")
            Me.columnVia = MyBase.Columns("Via")
            Me.columnReasons = MyBase.Columns("Reasons")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZipCode = New Global.System.Data.DataColumn("ZipCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZipCode)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnHomeNumber = New Global.System.Data.DataColumn("HomeNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHomeNumber)
            Me.columnCellNumber = New Global.System.Data.DataColumn("CellNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCellNumber)
            Me.columnVisited = New Global.System.Data.DataColumn("Visited", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisited)
            Me.columnApplied = New Global.System.Data.DataColumn("Applied", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApplied)
            Me.columnEnrolled = New Global.System.Data.DataColumn("Enrolled", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnrolled)
            Me.columnDegreeType = New Global.System.Data.DataColumn("DegreeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDegreeType)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnSpecialization = New Global.System.Data.DataColumn("Specialization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecialization)
            Me.columnOther_Interests = New Global.System.Data.DataColumn("Other Interests", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOther_Interests)
            Me.columnHighSchool = New Global.System.Data.DataColumn("HighSchool", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHighSchool)
            Me.columnGradYear = New Global.System.Data.DataColumn("GradYear", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradYear)
            Me.columnPlacementTest = New Global.System.Data.DataColumn("PlacementTest", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlacementTest)
            Me.columnTestScore = New Global.System.Data.DataColumn("TestScore", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestScore)
            Me.columnGPA = New Global.System.Data.DataColumn("GPA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGPA)
            Me.columnClassRank = New Global.System.Data.DataColumn("ClassRank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassRank)
            Me.columnClassSize = New Global.System.Data.DataColumn("ClassSize", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassSize)
            Me.columnColleges_Atteded = New Global.System.Data.DataColumn("Colleges Atteded", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColleges_Atteded)
            Me.columnEvent = New Global.System.Data.DataColumn("Event", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnEvent.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EventColumn")
            Me.columnEvent.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEvent")
            Me.columnEvent.ExtendedProperties.Add("Generator_UserColumnName", "Event")
            MyBase.Columns.Add(Me.columnEvent)
            Me.columnAuditionDate = New Global.System.Data.DataColumn("AuditionDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAuditionDate)
            Me.columnAuditor = New Global.System.Data.DataColumn("Auditor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAuditor)
            Me.columnAuditionRating = New Global.System.Data.DataColumn("AuditionRating", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAuditionRating)
            Me.columnAuditionNotes = New Global.System.Data.DataColumn("AuditionNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAuditionNotes)
            Me.columnDateContacted = New Global.System.Data.DataColumn("DateContacted", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateContacted)
            Me.columnContactedBy = New Global.System.Data.DataColumn("ContactedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactedBy)
            Me.columnVia = New Global.System.Data.DataColumn("Via", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVia)
            Me.columnReasons = New Global.System.Data.DataColumn("Reasons", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReasons)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTable1Row() As DataTable1Row
            Return CType(Me.NewRow,DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTable1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTable1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTable1RowChangedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanged(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTable1RowChangingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowChanging(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTable1RowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleted(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTable1RowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTable1RowDeleting(Me, New DataTable1RowChangeEvent(CType(e.Row,DataTable1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTable1Row(ByVal row As DataTable1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ApplicantReportDataSet = New ApplicantReportDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTable1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTable1Row
        Inherits Global.System.Data.DataRow
        
        Private tableDataTable1 As DataTable1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataTable1 = CType(Me.Table,DataTable1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.AddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.AddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZipCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ZipCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZipCode' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ZipCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HomeNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.HomeNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HomeNumber' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.HomeNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CellNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.CellNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CellNumber' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.CellNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Visited() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.VisitedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Visited' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.VisitedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Applied() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.AppliedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Applied' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.AppliedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Enrolled() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.EnrolledColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Enrolled' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.EnrolledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DegreeType() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DegreeTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DegreeType' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DegreeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Major() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.MajorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Major' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Specialization() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.SpecializationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Specialization' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.SpecializationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Other_Interests() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.Other_InterestsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Other Interests' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.Other_InterestsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HighSchool() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.HighSchoolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HighSchool' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.HighSchoolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GradYear() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.GradYearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GradYear' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.GradYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlacementTest() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.PlacementTestColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PlacementTest' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.PlacementTestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestScore() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.TestScoreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestScore' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.TestScoreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GPA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.GPAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GPA' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.GPAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClassRank() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ClassRankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClassRank' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ClassRankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClassSize() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ClassSizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClassSize' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ClassSizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Colleges_Atteded() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.Colleges_AttededColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Colleges Atteded' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.Colleges_AttededColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Event() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.EventColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Event' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.EventColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AuditionDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.AuditionDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AuditionDate' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.AuditionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Auditor() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.AuditorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Auditor' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.AuditorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AuditionRating() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.AuditionRatingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AuditionRating' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.AuditionRatingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AuditionNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.AuditionNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AuditionNotes' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.AuditionNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateContacted() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.DateContactedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateContacted' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.DateContactedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ContactedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactedBy' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ContactedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Via() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ViaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Via' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ViaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reasons() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataTable1.ReasonsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reasons' in table 'DataTable1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataTable1.ReasonsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableDataTable1.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableDataTable1.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.AddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressNull()
            Me(Me.tableDataTable1.AddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableDataTable1.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableDataTable1.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZipCodeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ZipCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZipCodeNull()
            Me(Me.tableDataTable1.ZipCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableDataTable1.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHomeNumberNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.HomeNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHomeNumberNull()
            Me(Me.tableDataTable1.HomeNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCellNumberNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.CellNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCellNumberNull()
            Me(Me.tableDataTable1.CellNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisitedNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.VisitedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisitedNull()
            Me(Me.tableDataTable1.VisitedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAppliedNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.AppliedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAppliedNull()
            Me(Me.tableDataTable1.AppliedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnrolledNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.EnrolledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnrolledNull()
            Me(Me.tableDataTable1.EnrolledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDegreeTypeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DegreeTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDegreeTypeNull()
            Me(Me.tableDataTable1.DegreeTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMajorNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.MajorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMajorNull()
            Me(Me.tableDataTable1.MajorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpecializationNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.SpecializationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpecializationNull()
            Me(Me.tableDataTable1.SpecializationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOther_InterestsNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.Other_InterestsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOther_InterestsNull()
            Me(Me.tableDataTable1.Other_InterestsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHighSchoolNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.HighSchoolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHighSchoolNull()
            Me(Me.tableDataTable1.HighSchoolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGradYearNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.GradYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGradYearNull()
            Me(Me.tableDataTable1.GradYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlacementTestNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.PlacementTestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlacementTestNull()
            Me(Me.tableDataTable1.PlacementTestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestScoreNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.TestScoreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestScoreNull()
            Me(Me.tableDataTable1.TestScoreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGPANull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.GPAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGPANull()
            Me(Me.tableDataTable1.GPAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClassRankNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ClassRankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClassRankNull()
            Me(Me.tableDataTable1.ClassRankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClassSizeNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ClassSizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClassSizeNull()
            Me(Me.tableDataTable1.ClassSizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColleges_AttededNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.Colleges_AttededColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColleges_AttededNull()
            Me(Me.tableDataTable1.Colleges_AttededColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_EventNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.EventColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_EventNull()
            Me(Me.tableDataTable1.EventColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAuditionDateNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.AuditionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAuditionDateNull()
            Me(Me.tableDataTable1.AuditionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAuditorNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.AuditorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAuditorNull()
            Me(Me.tableDataTable1.AuditorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAuditionRatingNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.AuditionRatingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAuditionRatingNull()
            Me(Me.tableDataTable1.AuditionRatingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAuditionNotesNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.AuditionNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAuditionNotesNull()
            Me(Me.tableDataTable1.AuditionNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateContactedNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.DateContactedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateContactedNull()
            Me(Me.tableDataTable1.DateContactedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactedByNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ContactedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactedByNull()
            Me(Me.tableDataTable1.ContactedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViaNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ViaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViaNull()
            Me(Me.tableDataTable1.ViaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReasonsNull() As Boolean
            Return Me.IsNull(Me.tableDataTable1.ReasonsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReasonsNull()
            Me(Me.tableDataTable1.ReasonsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTable1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTable1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTable1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTable1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
